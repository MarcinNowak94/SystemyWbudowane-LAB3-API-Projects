openapi: 3.0.0
info:
  version: 1.0.0
  contact:
    email: marcin.nowak1@edu.wsti.pl
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Systemy Wielowarstwowe Lab2 API
  
  description: |-
    _08255 Nowak Marcin 7ION_
    
    Opis API
    API powinno być spełniać wszystkie reguły REST (za wyjątkiem kodu na żądanie) oraz implementować HATEOAS. Będzie się ono składać się z następujących zasobów: projekty, zadania, komentarze do zadań oraz członkowie zespołu.
    Dla uproszczenia zakładamy, że API dostępne jest tylko wewnątrz prywatnej sieci i nie wymaga uwierzytelniania ani autoryzacji użytkowników.
    
    Funkcjonalność do zaimplementowania
    Funkcjonalność, która powinna być udostępniona przez API została podzielona wg. zasobów w systemie.
    - Projekty
      - Tworzenie nowego projektu. Podczas tworzenia nowego projektu użytkownik powinien podać podstawowe dane (jak np. nazwa, opis, data rozpoczęcia czy też planowana data zakończenia). W odpowiedzi klient powinien otrzymać identyfikator nowego projektu.
      - Pobieranie listy wszystkich projektów.
      - Pobieranie szczegółów na temat danego projektu.
      - Aktualizacja szczegółów danego projektu.
      - Usuwanie konkretnego projektu.
    - Zadania
      - Dodawanie nowego zadania w ramach konkretnego projektu. Zadanie powinno zawierać takie informacje jak nazwa, opis, priorytet oraz szacowany termin wykonania.
      - Listowanie zadań w ramach konkretnego projektu.
      - Pobieranie szczegółów konkretnego zadania.
      - Aktualizacja szczegółów konkretnego zadania.
      - Usuwanie konkretnego zadania.
    - Członkowie zespołu
      - Dodawanie nowego użytkownika do zespołu projektowego.
      - Pobieranie listy członków zespołu danego projektu.
      - Usuwanie użytkownika z zespołu.
    - Komentarze
      - Możliwość dodawania nowego komentarza do konkretnego zadania.
      - Możliwość pobierania listy komentarzy do konkretnego zadania.
      - Usuwanie konkretnego komentarza.

#Optional
tags:
  - name: projects
    description: Everything about Projects
    #externalDocs:
    #  description: Find out more
    #  url: http://swagger.io
  - name: tasks
    description: Everything about tasks
  - name: team members
    description: Everything about Team members
  - name: comments
    description: Comments for tasks

paths:
  /projects:
    get:
      tags: 
        - projects
      summary: List all projects
      description: Returns all projects
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Projects'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    post:
      tags:
        - projects
      summary: Add new project
      description: Adds new project and returns assigned ID
      operationId: addProject
      requestBody:
        description: Create new project
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Projects'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 10
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /projects/{projectID}:
    get:
      tags:
        - projects
      summary: List project
      description: Return a single project
      operationId: getProjectById
      parameters:
        - name: projectID
          in: path
          description: ID of project to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    delete:
      tags:
        - projects
      summary: Delete project with specified ID
      description: Delete a single project
      operationId: deleteProjectById
      parameters:
        - name: projectID
          in: path
          description: ID of project to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    put:
      tags:
        - projects
      summary: Overwrite project with specified ID
      description: Fully overwrite project with specified ID
      operationId: overwriteProjectById
      parameters:
        - name: projectID
          in: path
          description: ID of project to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Projects'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
  /projects/{projectID}/tasks:
    post:
      tags:
        - projects
        - tasks
      summary: Add new task
      description: Adds new task and returns assigned ID
      operationId: addTask
      parameters:
        - name: projectID
          in: path
          description: ID of project to add task to
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tasks'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 10
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - projects
        - tasks
      summary: List project tasks
      description: Return project tasks
      operationId: getProjectTasks
      parameters:
        - name: projectID
          in: path
          description: ID of project to return tasklist from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tasks'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
  /projects/{projectID}/tasks/{taskID}:
    get:
      tags:
        - projects
        - tasks
      summary: List task
      description: Return a single task
      operationId: getTaskById
      parameters:
        - name: projectID
          in: path
          description: ID of project to get task from
          required: true
          schema:
            type: integer
            format: int64
        - name: taskID
          in: path
          description: ID of task to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    delete:
      tags:
        - projects
        - tasks
      summary: Delete task with specified ID
      description: Delete a single task
      operationId: deleteTaskById
      parameters:
        - name: projectID
          in: path
          description: ID of project to delete task from
          required: true
          schema:
            type: integer
            format: int64
        - name: taskID
          in: path
          description: ID of task to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    put:
      tags:
        - projects
        - tasks
      summary: Overwrite task with specified ID
      description: Fully overwrite task with specified ID
      operationId: overwriteTaskById
      parameters:
        - name: projectID
          in: path
          description: ID of project to overvrite task
          required: true
          schema:
            type: integer
            format: int64
        - name: taskID
          in: path
          description: ID of task to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tasks'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tasks'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
  /projects/{projectID}/team-members:
    get:
      tags:
        - projects
        - team members
      summary: List project team members
      description: Return project team members
      operationId: getProjectTeamMembers
      parameters:
        - name: projectID
          in: path
          description: ID of project to return team members from
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeamMembers'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    post:
      tags:
        - projects
        - team members
      summary: Add new teammember to project
      description: Adds new teammember and returns assigned ID
      operationId: addTeamMemberToProject
      parameters:
        - name: projectID
          in: path
          description: ID of project to add team members to
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create new teammember
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamMembers'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 10
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /projects/{projectID}/team-members/{teammemberID}:
    delete:
      tags:
        - projects
        - team members
      summary: Delete teammember from project
      description: Adds new teammember and returns assigned ID
      operationId: removeTeamMemberFromProject
      parameters:
        - name: projectID
          in: path
          description: ID of project to remove team member from
          required: true
          schema:
            type: integer
            format: int64
        - name: teammemberID
          in: path
          description: ID of project team member to remove
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
  /projects/{projectID}/tasks/{taskID}/comments:
    get:
      tags:
        - projects
        - tasks
        - comments
      summary: List task comments
      description: Return task comments
      operationId: getTaskComments
      parameters:
        - name: projectID
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
        - name: taskID
          in: path
          description: ID of task
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comments'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
    post:
      tags:
        - projects
        - tasks
        - comments
      summary: Add task comment
      description: Adds task comment and returns created id
      operationId: addTaskComments
      parameters:
        - name: projectID
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
        - name: taskID
          in: path
          description: ID of task
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tasks'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 10
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
  /projects/{projectID}/tasks/{taskID}/comments/{commentID}:
    delete:
      tags:
        - projects
        - tasks
        - comments
      summary: Delete task comment
      description: Deletes task comment
      operationId: removeTaskComments
      parameters:
        - name: projectID
          in: path
          description: ID of project
          required: true
          schema:
            type: integer
            format: int64
        - name: taskID
          in: path
          description: ID of task
          required: true
          schema:
            type: integer
            format: int64
        - name: commentID
          in: path
          description: ID of comment
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found

components:
  schemas:
    Projects:
      type: object
      required:
        - name
        - startDate
        - dueDate
      properties:
        id:
          description: Project identifier assigned by application
          type: integer
          format: int64
          example: 10
        name:
          description: Project name
          type: string
          example: New project
        description:
          description: Project description
          type: string
          example: Project description
          default: No description provided
        startDate:
          description: Project start date
          type: string
          format: date-time
        dueDate:
          description: Planned project finish date
          type: string
          format: date-time
        members:
          type: array
          items: 
            $ref: '#/components/schemas/TeamMembers'
        tasks:
          type: array
          items: 
            $ref: '#/components/schemas/Tasks'

    Tasks:
      type: object
      required:
        - name
        - startDate
        - dueDate
      properties:
        id:
          description: Task identifier assigned by application
          type: integer
          format: int64
          example: 10
        name:
          description: Task name
          type: string
          example: New task
        description:
          description: Task description
          type: string
          example: Task description
          default: No description provided
        startDate:
          description: Task start date
          type: string
          format: date-time
        dueDate:
          description: Planned task finish date
          type: string
          format: date-time
        priority:
          description: Task priority
          type: string
          example: medium
          default: medium
          enum:
            - low
            - medium
            - high
            - critical
        comments:
          type: array
          items: 
            $ref: '#/components/schemas/Comments'
  
    TeamMembers:
      type: object
      required:
        - name
      properties:
        id:
          description: Team member identifier assigned by application
          type: integer
          format: int64
          example: 10
        name:
          description: Team member name
          type: string
          example: Steve

    Comments:
      type: object
      required:
        - content
      properties:
        id:
          description: Comment identifier assigned by application
          type: integer
          format: int64
          example: 10
        content:
          description: Comment
          type: string
          example: This is a comment content