# coding: utf-8

"""
    Systemy Wielowarstwowe Lab2 API

    _08255 Nowak Marcin 7ION_  Opis API API powinno być spełniać wszystkie reguły REST (za wyjątkiem kodu na żądanie) oraz implementować HATEOAS. Będzie się ono składać się z następujących zasobów: projekty, zadania, komentarze do zadań oraz członkowie zespołu. Dla uproszczenia zakładamy, że API dostępne jest tylko wewnątrz prywatnej sieci i nie wymaga uwierzytelniania ani autoryzacji użytkowników.  Funkcjonalność do zaimplementowania Funkcjonalność, która powinna być udostępniona przez API została podzielona wg. zasobów w systemie. - Projekty   - Tworzenie nowego projektu. Podczas tworzenia nowego projektu użytkownik powinien podać podstawowe dane (jak np. nazwa, opis, data rozpoczęcia czy też planowana data zakończenia). W odpowiedzi klient powinien otrzymać identyfikator nowego projektu.   - Pobieranie listy wszystkich projektów.   - Pobieranie szczegółów na temat danego projektu.   - Aktualizacja szczegółów danego projektu.   - Usuwanie konkretnego projektu. - Zadania   - Dodawanie nowego zadania w ramach konkretnego projektu. Zadanie powinno zawierać takie informacje jak nazwa, opis, priorytet oraz szacowany termin wykonania.   - Listowanie zadań w ramach konkretnego projektu.   - Pobieranie szczegółów konkretnego zadania.   - Aktualizacja szczegółów konkretnego zadania.   - Usuwanie konkretnego zadania. - Członkowie zespołu   - Dodawanie nowego użytkownika do zespołu projektowego.   - Pobieranie listy członków zespołu danego projektu.   - Usuwanie użytkownika z zespołu. - Komentarze   - Możliwość dodawania nowego komentarza do konkretnego zadania.   - Możliwość pobierania listy komentarzy do konkretnego zadania.   - Usuwanie konkretnego komentarza.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: marcin.nowak1@edu.wsti.pl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Comments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'content': 'str'
    }

    attribute_map = {
        'id': 'id',
        'content': 'content'
    }

    def __init__(self, id=None, content=None):  # noqa: E501
        """Comments - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._content = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.content = content

    @property
    def id(self):
        """Gets the id of this Comments.  # noqa: E501

        Comment identifier assigned by application  # noqa: E501

        :return: The id of this Comments.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comments.

        Comment identifier assigned by application  # noqa: E501

        :param id: The id of this Comments.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def content(self):
        """Gets the content of this Comments.  # noqa: E501

        Comment  # noqa: E501

        :return: The content of this Comments.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comments.

        Comment  # noqa: E501

        :param content: The content of this Comments.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Comments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Comments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
