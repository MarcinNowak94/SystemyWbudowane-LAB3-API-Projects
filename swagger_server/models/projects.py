# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.tasks import Tasks  # noqa: F401,E501
from swagger_server.models.team_members import TeamMembers  # noqa: F401,E501
from swagger_server import util


class Projects(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, description: str='No description provided', start_date: datetime=None, due_date: datetime=None, members: List[TeamMembers]=None, tasks: List[Tasks]=None):  # noqa: E501
        """Projects - a model defined in Swagger

        :param id: The id of this Projects.  # noqa: E501
        :type id: int
        :param name: The name of this Projects.  # noqa: E501
        :type name: str
        :param description: The description of this Projects.  # noqa: E501
        :type description: str
        :param start_date: The start_date of this Projects.  # noqa: E501
        :type start_date: datetime
        :param due_date: The due_date of this Projects.  # noqa: E501
        :type due_date: datetime
        :param members: The members of this Projects.  # noqa: E501
        :type members: List[TeamMembers]
        :param tasks: The tasks of this Projects.  # noqa: E501
        :type tasks: List[Tasks]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'description': str,
            'start_date': datetime,
            'due_date': datetime,
            'members': List[TeamMembers],
            'tasks': List[Tasks]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'start_date': 'startDate',
            'due_date': 'dueDate',
            'members': 'members',
            'tasks': 'tasks'
        }
        self._id = id
        self._name = name
        self._description = description
        self._start_date = start_date
        self._due_date = due_date
        self._members = members
        self._tasks = tasks

    @classmethod
    def from_dict(cls, dikt) -> 'Projects':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Projects of this Projects.  # noqa: E501
        :rtype: Projects
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Projects.

        Project identifier assigned by application  # noqa: E501

        :return: The id of this Projects.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Projects.

        Project identifier assigned by application  # noqa: E501

        :param id: The id of this Projects.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Projects.

        Project name  # noqa: E501

        :return: The name of this Projects.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Projects.

        Project name  # noqa: E501

        :param name: The name of this Projects.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Projects.

        Project description  # noqa: E501

        :return: The description of this Projects.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Projects.

        Project description  # noqa: E501

        :param description: The description of this Projects.
        :type description: str
        """

        self._description = description

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Projects.

        Project start date  # noqa: E501

        :return: The start_date of this Projects.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Projects.

        Project start date  # noqa: E501

        :param start_date: The start_date of this Projects.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def due_date(self) -> datetime:
        """Gets the due_date of this Projects.

        Planned project finish date  # noqa: E501

        :return: The due_date of this Projects.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: datetime):
        """Sets the due_date of this Projects.

        Planned project finish date  # noqa: E501

        :param due_date: The due_date of this Projects.
        :type due_date: datetime
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def members(self) -> List[TeamMembers]:
        """Gets the members of this Projects.


        :return: The members of this Projects.
        :rtype: List[TeamMembers]
        """
        return self._members

    @members.setter
    def members(self, members: List[TeamMembers]):
        """Sets the members of this Projects.


        :param members: The members of this Projects.
        :type members: List[TeamMembers]
        """

        self._members = members

    @property
    def tasks(self) -> List[Tasks]:
        """Gets the tasks of this Projects.


        :return: The tasks of this Projects.
        :rtype: List[Tasks]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: List[Tasks]):
        """Sets the tasks of this Projects.


        :param tasks: The tasks of this Projects.
        :type tasks: List[Tasks]
        """

        self._tasks = tasks
