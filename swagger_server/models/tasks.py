# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.comments import Comments  # noqa: F401,E501
from swagger_server import util


class Tasks(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, description: str='No description provided', start_date: datetime=None, due_date: datetime=None, priority: str='medium', comments: List[Comments]=None):  # noqa: E501
        """Tasks - a model defined in Swagger

        :param id: The id of this Tasks.  # noqa: E501
        :type id: int
        :param name: The name of this Tasks.  # noqa: E501
        :type name: str
        :param description: The description of this Tasks.  # noqa: E501
        :type description: str
        :param start_date: The start_date of this Tasks.  # noqa: E501
        :type start_date: datetime
        :param due_date: The due_date of this Tasks.  # noqa: E501
        :type due_date: datetime
        :param priority: The priority of this Tasks.  # noqa: E501
        :type priority: str
        :param comments: The comments of this Tasks.  # noqa: E501
        :type comments: List[Comments]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'description': str,
            'start_date': datetime,
            'due_date': datetime,
            'priority': str,
            'comments': List[Comments]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'start_date': 'startDate',
            'due_date': 'dueDate',
            'priority': 'priority',
            'comments': 'comments'
        }
        self._id = id
        self._name = name
        self._description = description
        self._start_date = start_date
        self._due_date = due_date
        self._priority = priority
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'Tasks':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tasks of this Tasks.  # noqa: E501
        :rtype: Tasks
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Tasks.

        Task identifier assigned by application  # noqa: E501

        :return: The id of this Tasks.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Tasks.

        Task identifier assigned by application  # noqa: E501

        :param id: The id of this Tasks.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Tasks.

        Task name  # noqa: E501

        :return: The name of this Tasks.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Tasks.

        Task name  # noqa: E501

        :param name: The name of this Tasks.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Tasks.

        Task description  # noqa: E501

        :return: The description of this Tasks.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Tasks.

        Task description  # noqa: E501

        :param description: The description of this Tasks.
        :type description: str
        """

        self._description = description

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Tasks.

        Task start date  # noqa: E501

        :return: The start_date of this Tasks.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Tasks.

        Task start date  # noqa: E501

        :param start_date: The start_date of this Tasks.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def due_date(self) -> datetime:
        """Gets the due_date of this Tasks.

        Planned task finish date  # noqa: E501

        :return: The due_date of this Tasks.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: datetime):
        """Sets the due_date of this Tasks.

        Planned task finish date  # noqa: E501

        :param due_date: The due_date of this Tasks.
        :type due_date: datetime
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def priority(self) -> str:
        """Gets the priority of this Tasks.

        Task priority  # noqa: E501

        :return: The priority of this Tasks.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority: str):
        """Sets the priority of this Tasks.

        Task priority  # noqa: E501

        :param priority: The priority of this Tasks.
        :type priority: str
        """
        allowed_values = ["low", "medium", "high", "critical"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def comments(self) -> List[Comments]:
        """Gets the comments of this Tasks.


        :return: The comments of this Tasks.
        :rtype: List[Comments]
        """
        return self._comments

    @comments.setter
    def comments(self, comments: List[Comments]):
        """Sets the comments of this Tasks.


        :param comments: The comments of this Tasks.
        :type comments: List[Comments]
        """

        self._comments = comments
